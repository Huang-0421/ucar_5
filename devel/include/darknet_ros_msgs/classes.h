// Generated by gencpp from file darknet_ros_msgs/classes.msg
// DO NOT EDIT!


#ifndef DARKNET_ROS_MSGS_MESSAGE_CLASSES_H
#define DARKNET_ROS_MSGS_MESSAGE_CLASSES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace darknet_ros_msgs
{
template <class ContainerAllocator>
struct classes_
{
  typedef classes_<ContainerAllocator> Type;

  classes_()
    : corn_num(0)
    , cucumber_num(0)
    , rice_num(0)
    , wheat_num(0)
    , corn_cut_num(0)
    , cucumber_cut_num(0)
    , rice_cut_num(0)
    , wheat_cut_num(0)  {
    }
  classes_(const ContainerAllocator& _alloc)
    : corn_num(0)
    , cucumber_num(0)
    , rice_num(0)
    , wheat_num(0)
    , corn_cut_num(0)
    , cucumber_cut_num(0)
    , rice_cut_num(0)
    , wheat_cut_num(0)  {
  (void)_alloc;
    }



   typedef int16_t _corn_num_type;
  _corn_num_type corn_num;

   typedef int16_t _cucumber_num_type;
  _cucumber_num_type cucumber_num;

   typedef int16_t _rice_num_type;
  _rice_num_type rice_num;

   typedef int16_t _wheat_num_type;
  _wheat_num_type wheat_num;

   typedef int16_t _corn_cut_num_type;
  _corn_cut_num_type corn_cut_num;

   typedef int16_t _cucumber_cut_num_type;
  _cucumber_cut_num_type cucumber_cut_num;

   typedef int16_t _rice_cut_num_type;
  _rice_cut_num_type rice_cut_num;

   typedef int16_t _wheat_cut_num_type;
  _wheat_cut_num_type wheat_cut_num;





  typedef boost::shared_ptr< ::darknet_ros_msgs::classes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_ros_msgs::classes_<ContainerAllocator> const> ConstPtr;

}; // struct classes_

typedef ::darknet_ros_msgs::classes_<std::allocator<void> > classes;

typedef boost::shared_ptr< ::darknet_ros_msgs::classes > classesPtr;
typedef boost::shared_ptr< ::darknet_ros_msgs::classes const> classesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_ros_msgs::classes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_ros_msgs::classes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_ros_msgs::classes_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::classes_<ContainerAllocator2> & rhs)
{
  return lhs.corn_num == rhs.corn_num &&
    lhs.cucumber_num == rhs.cucumber_num &&
    lhs.rice_num == rhs.rice_num &&
    lhs.wheat_num == rhs.wheat_num &&
    lhs.corn_cut_num == rhs.corn_cut_num &&
    lhs.cucumber_cut_num == rhs.cucumber_cut_num &&
    lhs.rice_cut_num == rhs.rice_cut_num &&
    lhs.wheat_cut_num == rhs.wheat_cut_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_ros_msgs::classes_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::classes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::classes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::classes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::classes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::classes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::classes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::classes_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_ros_msgs::classes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5de667e5e14606f356e3c7c2b8f9d715";
  }

  static const char* value(const ::darknet_ros_msgs::classes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5de667e5e14606f3ULL;
  static const uint64_t static_value2 = 0x56e3c7c2b8f9d715ULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_ros_msgs::classes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_ros_msgs/classes";
  }

  static const char* value(const ::darknet_ros_msgs::classes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_ros_msgs::classes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 corn_num  \n"
"int16 cucumber_num\n"
"int16 rice_num\n"
"int16 wheat_num\n"
"int16 corn_cut_num  \n"
"int16 cucumber_cut_num\n"
"int16 rice_cut_num\n"
"int16 wheat_cut_num\n"
;
  }

  static const char* value(const ::darknet_ros_msgs::classes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_ros_msgs::classes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.corn_num);
      stream.next(m.cucumber_num);
      stream.next(m.rice_num);
      stream.next(m.wheat_num);
      stream.next(m.corn_cut_num);
      stream.next(m.cucumber_cut_num);
      stream.next(m.rice_cut_num);
      stream.next(m.wheat_cut_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct classes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_ros_msgs::classes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_ros_msgs::classes_<ContainerAllocator>& v)
  {
    s << indent << "corn_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.corn_num);
    s << indent << "cucumber_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cucumber_num);
    s << indent << "rice_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rice_num);
    s << indent << "wheat_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.wheat_num);
    s << indent << "corn_cut_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.corn_cut_num);
    s << indent << "cucumber_cut_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.cucumber_cut_num);
    s << indent << "rice_cut_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.rice_cut_num);
    s << indent << "wheat_cut_num: ";
    Printer<int16_t>::stream(s, indent + "  ", v.wheat_cut_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_ROS_MSGS_MESSAGE_CLASSES_H
