# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from darknet_ros_msgs/classes.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class classes(genpy.Message):
  _md5sum = "5de667e5e14606f356e3c7c2b8f9d715"
  _type = "darknet_ros_msgs/classes"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 corn_num  
int16 cucumber_num
int16 rice_num
int16 wheat_num
int16 corn_cut_num  
int16 cucumber_cut_num
int16 rice_cut_num
int16 wheat_cut_num
"""
  __slots__ = ['corn_num','cucumber_num','rice_num','wheat_num','corn_cut_num','cucumber_cut_num','rice_cut_num','wheat_cut_num']
  _slot_types = ['int16','int16','int16','int16','int16','int16','int16','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       corn_num,cucumber_num,rice_num,wheat_num,corn_cut_num,cucumber_cut_num,rice_cut_num,wheat_cut_num

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(classes, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.corn_num is None:
        self.corn_num = 0
      if self.cucumber_num is None:
        self.cucumber_num = 0
      if self.rice_num is None:
        self.rice_num = 0
      if self.wheat_num is None:
        self.wheat_num = 0
      if self.corn_cut_num is None:
        self.corn_cut_num = 0
      if self.cucumber_cut_num is None:
        self.cucumber_cut_num = 0
      if self.rice_cut_num is None:
        self.rice_cut_num = 0
      if self.wheat_cut_num is None:
        self.wheat_cut_num = 0
    else:
      self.corn_num = 0
      self.cucumber_num = 0
      self.rice_num = 0
      self.wheat_num = 0
      self.corn_cut_num = 0
      self.cucumber_cut_num = 0
      self.rice_cut_num = 0
      self.wheat_cut_num = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.corn_num, _x.cucumber_num, _x.rice_num, _x.wheat_num, _x.corn_cut_num, _x.cucumber_cut_num, _x.rice_cut_num, _x.wheat_cut_num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.corn_num, _x.cucumber_num, _x.rice_num, _x.wheat_num, _x.corn_cut_num, _x.cucumber_cut_num, _x.rice_cut_num, _x.wheat_cut_num,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8h().pack(_x.corn_num, _x.cucumber_num, _x.rice_num, _x.wheat_num, _x.corn_cut_num, _x.cucumber_cut_num, _x.rice_cut_num, _x.wheat_cut_num))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.corn_num, _x.cucumber_num, _x.rice_num, _x.wheat_num, _x.corn_cut_num, _x.cucumber_cut_num, _x.rice_cut_num, _x.wheat_cut_num,) = _get_struct_8h().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8h = None
def _get_struct_8h():
    global _struct_8h
    if _struct_8h is None:
        _struct_8h = struct.Struct("<8h")
    return _struct_8h
