// Generated by gencpp from file darknet_ros_msgs/imgResponse.msg
// DO NOT EDIT!


#ifndef DARKNET_ROS_MSGS_MESSAGE_IMGRESPONSE_H
#define DARKNET_ROS_MSGS_MESSAGE_IMGRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <darknet_ros_msgs/classes.h>

namespace darknet_ros_msgs
{
template <class ContainerAllocator>
struct imgResponse_
{
  typedef imgResponse_<ContainerAllocator> Type;

  imgResponse_()
    : gh()  {
    }
  imgResponse_(const ContainerAllocator& _alloc)
    : gh(_alloc)  {
  (void)_alloc;
    }



   typedef  ::darknet_ros_msgs::classes_<ContainerAllocator>  _gh_type;
  _gh_type gh;





  typedef boost::shared_ptr< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> const> ConstPtr;

}; // struct imgResponse_

typedef ::darknet_ros_msgs::imgResponse_<std::allocator<void> > imgResponse;

typedef boost::shared_ptr< ::darknet_ros_msgs::imgResponse > imgResponsePtr;
typedef boost::shared_ptr< ::darknet_ros_msgs::imgResponse const> imgResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::darknet_ros_msgs::imgResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::darknet_ros_msgs::imgResponse_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::imgResponse_<ContainerAllocator2> & rhs)
{
  return lhs.gh == rhs.gh;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::darknet_ros_msgs::imgResponse_<ContainerAllocator1> & lhs, const ::darknet_ros_msgs::imgResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace darknet_ros_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83bfec159821df3d2f338afe1af73b6f";
  }

  static const char* value(const ::darknet_ros_msgs::imgResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83bfec159821df3dULL;
  static const uint64_t static_value2 = 0x2f338afe1af73b6fULL;
};

template<class ContainerAllocator>
struct DataType< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "darknet_ros_msgs/imgResponse";
  }

  static const char* value(const ::darknet_ros_msgs::imgResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "classes gh\n"
"\n"
"================================================================================\n"
"MSG: darknet_ros_msgs/classes\n"
"int16 corn_num  \n"
"int16 cucumber_num\n"
"int16 rice_num\n"
"int16 wheat_num\n"
"int16 corn_cut_num  \n"
"int16 cucumber_cut_num\n"
"int16 rice_cut_num\n"
"int16 wheat_cut_num\n"
;
  }

  static const char* value(const ::darknet_ros_msgs::imgResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gh);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imgResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::darknet_ros_msgs::imgResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::darknet_ros_msgs::imgResponse_<ContainerAllocator>& v)
  {
    s << indent << "gh: ";
    s << std::endl;
    Printer< ::darknet_ros_msgs::classes_<ContainerAllocator> >::stream(s, indent + "  ", v.gh);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DARKNET_ROS_MSGS_MESSAGE_IMGRESPONSE_H
